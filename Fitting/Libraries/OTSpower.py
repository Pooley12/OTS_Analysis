## Functions for generating maxwellain OTS spectral broadening
## Generated by: C. Bruulsema (2022)
## Updated by: H. Poole (2025)

#%%
import numpy as np
import os
import scipy.ndimage as spn
from scipy.interpolate import interp1d
#%%########################################################################
angddir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'angles')

def epw_kang_with_file(omg, spec, sa0):
  angs = np.load(angddir + '/angOMEGA.npy')
  fangs = np.load(angddir + '/fangOMEGA.npy')
  
  valang = np.zeros(len(omg))
  for i in range(len(angs)):
    sa = sa0 + angs[i]
    specnow = spec
    valang = valang + specnow * fangs[i]
  return (valang)

def kangsm_with_file(omg,spec,sa):
    """
    Modifies and weights a given spectrum according to angular offsets and a beam intensity profile.

    Parameters
    ----------
    omg : np.ndarray
        Array of frequency or wavelength values for the input spectrum (rad/s).
    spec : np.ndarray
        Spectral intensity values corresponding to `omg`.
    sa : float
        Scattering angle (degrees).
    angs : float
        Angle differences (degrees).
    fangs : float
        Fraction of beam intensity as a function of `angs` (sum(fangs)=1).

    Returns
    -------
    np.ndarray
        The modified and weighted spectrum as a 1D array.

    Notes
    -----
    - The function expects the global variable `angddir` to be defined, pointing to the directory
      containing 'angOMEGA.npy' and 'fangOMEGA.npy'.
    - Uses linear interpolation to shift the spectrum for each angle.
    """
    angs = np.load(angddir + '/angOMEGA.npy')
    fangs = np.load(angddir + '/fangOMEGA.npy')
    valang=np.zeros(len(spec))

    # For each angle offset, modify the spectrum by shifting and scaling according to the angle,
    # then weight by the beam intensity profile
    for i in range(len(angs)):
        intmult=1.0*(angs[i])/sa   #0.8
        intmult=-1.0*intmult*(1.0-1.1*(intmult+0.138))
        intamp=1.0+1.2*intmult
        omgn=omg*(1.0+intmult)
        fva = interp1d(omg, spec, fill_value='extrapolate')     
        vali=fva(omgn)*intamp
        valang=valang+vali*fangs[i]
    return valang


def OTSpwr(Pin,Lts,res_om, omg, omgL, ne, spec):   
    """
    Calculates the Thomson scattered power spectrum for an optical Thomson scattering (OTS) diagnostic.

    This function takes the input laser power, scattering length, spectral resolution, frequency arrays,
    laser frequency, electron density, and a precomputed spectral shape, and returns the power spectrum
    after applying instrumental broadening.

    Parameters
    ----------
    Pin : float
        Input laser power (W).
    Lts : float
        Scattering length (cm).
    res_om : float
        Frequency broadening (s^-1).
    omg : np.ndarray
        Array of frequency values at which the spectrum is evaluated (rad/s).
    omgL : float
        Probe laser frequency (rad/s).
    ne : float
        Electron density (cm^-3).
    spec : np.ndarray
        Precomputed spectral form factor.

    Returns
    -------
    np.ndarray
        The power spectrum after applying instrumental broadening.
    """
    re=2.8179403227e-13 #cm 
    skom=spec #skw(omg, sa, omgL,Te,Ti,Z,Ai,ne,ve,vi)
    mid_ind=int(len(omg)/2)
    domg=np.abs(omg[mid_ind] - omg[mid_ind + 1])
    skomres=spn.gaussian_filter(skom,res_om/domg)
    skompow=skomres*(Pin*re**2*Lts/(2*np.pi))*ne*(1+2*omg/omgL)
    return skompow

