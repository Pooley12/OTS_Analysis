## Calibration Analysis Script for 6th June 2023 Shot Day.
## This script provides the instrument calibration and FWHM information 
## for the IAW and EPW diagnostics.
## Generated by: H. Poole

## Import necessary libraries
import os
import numpy as np
import matplotlib.pyplot as plt
import peakutils
import sys
import scipy.constants as cst
from pyhdf.SD import SD, SDC
from scipy.optimize import curve_fit

class Spectrometer_setup:
    """
    Sets up and manages spectrometer parameters for Thomson scattering diagnostics.

    This class initializes spectrometer settings based on the diagnostic type ('IAW' or 'EPW'),
    global file location, and experimental shot number. It configures probe wavelength, wavelength
    per pixel, and probe center, either from default values or by reading from experimental shot files.

    Parameters
    ----------
    Diagnostic : str
        Type of diagnostic ('IAW' or 'EPW').
    Global_loc : str
        Path to the global data directory.
    Experimental_shot : int
        Experimental shot number.

    Attributes
    ----------
    Probe_wavelength : float
        Wavelength of the probe laser (nm).
    Wavelength_per_pixel : float
        Wavelength change per pixel (nm/pixel).
    Probe_center : float
        Central wavelength of the spectrometer (nm).

    Notes
    -----
    - If an experimental shot is provided, the spectrometer center is obtained from the HDF file.
    - Otherwise, default values are assigned based on the diagnostic type.
    """

    def __init__(self, Diagnostic, Global_loc, Experimental_shot):
        self.Diagnostic = Diagnostic
        self.Global_loc = Global_loc
        self.Experimental_shot = Experimental_shot
        self.get_info()

    def get_info(self):
        """
        Sets spectrometer parameters based on the diagnostic type and experimental shot.
        This method configures the probe wavelength, wavelength per pixel, and probe center
        for the spectrometer. The values are determined by the diagnostic type ('IAW' or 'EPW')
        and whether an experimental shot is specified.

        Attributes set
        --------------
        Probe_wavelength : float
            Wavelength of the probe laser (nm).
        Wavelength_per_pixel : float
            Wavelength change per pixel (nm/pixel). Provided by J. Katz.
        Probe_center : float
            Central wavelength of the spectrometer (nm).

        Notes
        -----
        - If an experimental shot is provided, the spectrometer center is obtained using `get_spectrometer_center()`.
        - Otherwise, default values are assigned, which can be found in the diagnostic setup in the SRF/RID or in the Experimental Image table in the Shot Report.
        """
        self.Probe_wavelength = 526.5 ## The 2w wavelength
        if self.Experimental_shot != 0:
            self.get_spectrometer_center()
        if self.Diagnostic == 'IAW':
            self.Wavelength_per_pixel = -0.00686
            if self.Experimental_shot == 0:
                self.Probe_center = 526.5
        elif self.Diagnostic == 'EPW':
            self.Wavelength_per_pixel = 0.4143 
            if self.Experimental_shot == 0:
                self.Probe_center = 527

    def get_spectrometer_center(self):
        """
        Retrieves the spectrometer center wavelength from an experimental shot HDF file.

        This method constructs the file path for the experimental shot's HDF file and attempts to read the
        'CentralWavelength' attribute from the 'Streak_array' dataset. If the file does not exist, it reverts
        to a user-defined spectrometer center by setting the experimental shot to 0.

        Side Effects
        ------------
        - Updates self.Probe_center with the retrieved central wavelength from the HDF file.
        - If the file does not exist, sets self.Experimental_shot to 0 and reverts to user-defined spectrometer center.
        """
        Example_parent_loc = os.path.join(self.Global_loc, str(self.Experimental_shot), self.Diagnostic)
        File_loc = os.path.join(Example_parent_loc, f'{self.Diagnostic.lower()}_s{self.Experimental_shot}.hdf')
        print(File_loc)
        if not os.path.exists(File_loc):
            print('Experimental file not found: {}'.format(File_loc))
            print('Reverting to user defined spectrometer center.')
            self.Experimental_shot = 0
        else:
            hdf = SD(File_loc, SDC.READ)
            data = hdf.select('Streak_array')
            data_attributes = data.attributes()
            self.Probe_center = data_attributes['CentralWavelength']

class Calibration_analysis:
    """
    Performs calibration analysis for IAW and EPW diagnostics.

    This class processes calibration images to extract key spectrometer parameters,
    including the central wavelength and full width at half maximum (FWHM), using 
    Gaussian fitting and background subtraction. It supports visualization and saving 
    of calibration results.

    Parameters
    ----------
    Diagnostic : str
        Type of diagnostic ('IAW' or 'EPW').
    Global_loc : str
        Path to the global data directory.
    Parent_loc : str
        Path to the parent directory containing the calibration shot data.
    FWHM_file_loc : str
        Path to the HDF file containing FWHM calibration image.
    Alignment_file_loc : str
        Path to the HDF file containing alignment calibration image.
    Experimental_shot : int
        Experimental shot number.
    Save_bool : bool
        If True, saves generated calibration plots.

    Attributes
    ----------
    Spectrometer : Spectrometer_setup
        Instance containing spectrometer configuration and parameters.
    FWHM_image : numpy.ndarray
        Processed FWHM calibration image.
    Alignment_image : numpy.ndarray
        Processed alignment calibration image.
    Probe_pix_loc : int
        Pixel location of the probe center in the calibration images.
    Central_wavelength : float
        Extracted central wavelength from calibration analysis.
    FWHM : float
        Extracted full width at half maximum from calibration analysis.
    """
    ## This class provides the calibration analysis for the IAW and EPW diagnostics

    def __init__(self, Diagnostic, Global_loc, Parent_loc, FWHM_file_loc, Alignment_file_loc, Experimental_shot, Save_bool):
        self.Diagnostic = Diagnostic
        self.Global_loc = Global_loc
        self.Parent_loc = Parent_loc
        self.Experimental_shot = Experimental_shot
        self.FWHM_file_loc = FWHM_file_loc
        self.Alignment_file_loc = Alignment_file_loc
        self.Save_bool = Save_bool

        self.Spectrometer = Spectrometer_setup(self.Diagnostic, self.Global_loc, self.Experimental_shot)
        
        self.FWHM_image = self.read_hdf(self.FWHM_file_loc)
        self.Alignment_image = self.read_hdf(self.Alignment_file_loc)
        
        self.perform_calibration()

    def read_hdf(self, File_loc, plot=False):
        """
        This function opens the specified HDF file, extracts the first data group, and retrieves the raw and pre-shot images.
        It subtracts the background (pre-shot) image from the raw image, sets negative values to zero, and normalizes the result.
        If `plot` is True, the processed image is displayed using matplotlib.

        Parameters
        ----------
        File_loc : str
            Path to the HDF file to be read.
        plot : bool, optional
            If True, displays a plot of the processed data image (default is False).

        Returns
        -------
        data_image : numpy.ndarray
            The processed image data with background subtracted and negative values set to zero.
        """
        print(f"Reading HDF file: {File_loc}")
        hdf = SD(File_loc, SDC.READ)
        hdf_object = hdf.datasets()
        
        ## Get list of data groups stored in hdf file
        obj_groups = [k for k in hdf_object.keys()]
        print(f"\tData groups in HDF file: {obj_groups}")

        ## Extracting real data from the hdf
        data = hdf.select('Streak_array')
        data_array = np.array(data.get(), dtype=np.float64)

        ## Data image taken during shot
        raw_image = data_array[0]
        ## Background image taken prior to shot
        pre_shot = data_array[1]
        data_image = raw_image - pre_shot
        data_image[data_image < 0] = 0
        data_image = data_image - np.min(data_image)

        if plot:
            fig, axs = plt.subplots(figsize=(5, 4))
            im = axs.imshow(data_image, cmap='inferno', origin='lower')
            plt.colorbar(im, ax=axs)
            axs.set_aspect('equal', adjustable='box')
            axs.invert_yaxis()
            axs.set_yticks([])
            axs.set_xticks([])
            plt.suptitle('Calibration {} Data\n{}'.format(self.Diagnostic, File_loc.replace(f"{self.Parent_loc}/", '')))
        return data_image
    
    def perform_calibration(self, calibration_region=[400, 600], plot=True):
        """
        Performs calibration analysis on the provided data images within a specified pixel region.
        This method processes both the FWHM and alignment images to extract calibration parameters,
        including the central wavelength and FWHM. Optionally, it generates diagnostic plots
        visualizing the calibration results.
        
        Parameters
        ----------
        calibration_region : list of int, optional
            The [start, end] pixel range for calibration analysis. Default is [400, 600].
        plot : bool, optional
            If True, generates diagnostic plots of the calibration analysis. Default is True.
        
        Notes
        -----
        - Updates instance attributes: Central_wavelength and FWHM.
        - If `plot` is True, displays and optionally saves calibration analysis figures.
        """   
        Probe_pix_loc_fwhm, Central_wavelength_fwhm, Gaus_params_fwhm, Signal_fit_fwhm, Signal_sum_fwhm = self.process_image(self.FWHM_image, calibration_region)
        Probe_pix_loc_align, Central_wavelength_align, Gaus_params_align, Signal_fit_align, Signal_sum_align = self.process_image(self.Alignment_image, calibration_region)

        self.Probe_pix_loc = Probe_pix_loc_align
        self.Central_wavelength = Central_wavelength_align
        popt_gaus = Gaus_params_fwhm

        self.FWHM = 2 * np.sqrt(2 * np.log(2)) * popt_gaus[-1]
        Input_FWHM = popt_gaus[-1]

        if plot == True:
            if Diagnostic == 'IAW':
                s = 0.5
            elif Diagnostic == 'EPW':
                s = 20

            fig, axs = plt.subplots(2, 2, figsize=(8, 7))

            def add_image(ax, image, central_wavelength, fit, sum, cmap='inferno', title='Image'): 
                ax.imshow(image.T, cmap=cmap, origin='lower', extent=[fit[0][0], fit[0][-1], 0, image.shape[1]])
                ax.axvline(central_wavelength, color='red', linestyle='--', label='Image centre', alpha=0.7)
                ax.axvline(self.Spectrometer.Probe_center, color='cyan', linestyle='--', label='Probe centre', alpha=0.7)
                ax.plot(fit[0], calibration_region[1]-50+sum[1]*20, ':', color='white', label='Signal')
                ax.plot(fit[0], calibration_region[1]-50+fit[1]*20, color='limegreen')
                leg = ax.legend()
                ax.add_artist(leg)
                ax.set_xlabel('Wavelength (nm)')
                ax.set_ylabel('Pixels')              
                ax.set_aspect('auto', adjustable='box')
                ax.set_title(f'{title}')
            
            def add_fit(ax, central_wavelength, fit, sum, fwhm):
                ax.plot(fit[0], sum[1], 'k.', label='Raw Signal')
                ax.plot(fit[0], fit[1], 'g-', label='Gaussian Fit')
                ax.axvline(central_wavelength, color='red', linestyle='--', alpha=0.7)
                ax.axvline(self.Spectrometer.Probe_center, color='cyan', linestyle='--', alpha=0.7)
                leg = ax.legend(title='Gaus FWHM={:.2g}nm'.format(fwhm), fontsize=10)
                ax.add_artist(leg)
                ax.set_xlabel('Wavelength (nm)')
                ax.set_ylabel('Intensity')
            
            add_image(axs[0, 0], self.Alignment_image, Central_wavelength_align, Signal_fit_align, Signal_sum_align, title='Alignment Image')
            add_image(axs[0, 1], self.FWHM_image, Central_wavelength_fwhm, Signal_fit_fwhm, Signal_sum_fwhm, title='FWHM Image')

            add_fit(axs[1, 0], Central_wavelength_align, Signal_fit_align, Signal_sum_align, 2 * np.sqrt(2 * np.log(2)) * Gaus_params_align[-1])
            add_fit(axs[1, 1], Central_wavelength_fwhm, Signal_fit_fwhm, Signal_sum_fwhm, 2 * np.sqrt(2 * np.log(2)) * Gaus_params_fwhm[-1])

            for a in axs.flat:
                a.minorticks_on()
                a.tick_params(axis='both', which='major', length=10, direction='in', top=True, right=True)
                a.tick_params(axis='both', which='minor', length=5, direction='in', top=True, right=True)
                a.set_xlim(self.Central_wavelength-s, self.Central_wavelength+s)
            for a in axs[0, :].flat:
                a.tick_params(which='both', color='white')
                a.set_ylim(calibration_region[0]+100, calibration_region[1]+25) 
            plt.suptitle('{} Calibration Analysis'.format(self.Diagnostic), fontsize=16)
            if self.Save_bool:
                plt.savefig(os.path.join(self.Parent_loc, f'{self.Diagnostic}_calibration_analysis.png'), dpi=300, bbox_inches='tight')

    def process_image(self, Image, calibration_region, plot=False):
        """
        Processes a calibration image to determine its central wavelength and full width at half maximum (FWHM).

        Parameters
        ----------
        Image : numpy.ndarray
            2D array representing the calibration image.
        calibration_region : tuple or list
            Indices specifying the region of interest for calibration (start, end).
        plot : bool, optional
            If True, plots intermediate results for diagnostic purposes (default is False).

        Returns
        -------
        Probe_pix_loc : int
            Pixel location of the probe center.
        Central_wavelength : float
            Central wavelength of the calibration image.
        popt_gaus : list
            Optimal parameters for the fitted Gaussian [amplitude, center, width].
        [Wavelength, Fit] : list
            Arrays of wavelength values and corresponding fitted Gaussian values.
        [Sum_X, Sum_Y] : list
            Summed signal arrays along X and Y axes, respectively.
        """
        ## Masking the image to central calibration area
        Image_mask = np.zeros_like(Image)
        Image_mask[calibration_region[0]:calibration_region[1], calibration_region[0]:calibration_region[1]] = 1
        Nan_image = Image * Image_mask

        def strip_sum(image, axis=0, polyfit=1, plot=plot):
            ## Summing the calibration signal along one axis 
            ## and performing crude background removal
            Sum = np.sum(image, axis=axis)
            Sum /= np.max(Sum)
            Fit_sum = Sum.copy()

            Fit_sum[Fit_sum >= 0.05 * np.max(Fit_sum)] = np.mean(Fit_sum[calibration_region[0]-100:calibration_region[0]])
            poly = np.poly1d(np.polyfit(np.arange(calibration_region[0], calibration_region[1], 1), Fit_sum[calibration_region[0]:calibration_region[1]], polyfit))
            fit = poly(np.arange(calibration_region[0], calibration_region[1], 1))
            if plot:
                plt.figure()
                plt.plot(Sum[calibration_region[0]:calibration_region[1]], 'k-', label='Summed signal')
                plt.plot(fit, 'r--', label='Background fit')
                plt.legend()
                plt.suptitle('Checking background fit to signal along axis {}'.format(axis))
            Sum[calibration_region[0]:calibration_region[1]] = Sum[calibration_region[0]:calibration_region[1]] - fit
            return Sum/np.max(Sum)

        Sum_X = strip_sum(Nan_image, axis=0, polyfit=1)
        Sum_Y = strip_sum(Nan_image, axis=1, polyfit=1)
        Sum_Y[Sum_Y < 0] = 0

        Pixels = np.arange(0, np.shape(Image)[0], 1) # This assumes square image

        Peak_X = np.argmax(Sum_Y)
        Peak_Y = np.argmax(Sum_X)

        ## Initial guess of central wavelength
        Lambdas = Pixels * self.Spectrometer.Wavelength_per_pixel
        Lambdas_peak = Lambdas[Peak_X]
        Shift = self.Spectrometer.Probe_center - Lambdas_peak
        Wavelength = Lambdas + Shift

        ## Fitting a Gaussian to the instrument function
        popt_gaus, pcov_gaus = curve_fit(self.gaussian, Wavelength, Sum_Y, p0=[1, self.Spectrometer.Probe_center, 0.1])
        fit_gaussian = self.gaussian(Wavelength, *popt_gaus)
        FWHM = 2 * np.sqrt(2 * np.log(2)) * popt_gaus[-1]
        Input_FWHM = popt_gaus[-1]
        Fit = fit_gaussian

        Lambdas_peak = Lambdas[np.argmax(fit_gaussian)]
        Shift = self.Spectrometer.Probe_center - Lambdas_peak
        Wavelength = Lambdas + Shift
        Central_wavelength = Shift + self.Spectrometer.Wavelength_per_pixel*np.shape(Image)[1] / 2
        Probe_pix_loc = np.argmax(fit_gaussian)

        if Diagnostic == 'IAW':
            ## There is a double peak feature in this IAW calibration data..
            Indexes = peakutils.peak.indexes(Sum_Y, min_dist=5, thres=0.85)[:]
            Peak = int(((Indexes[0]+Indexes[1])/2))
            popt_gaus, pcov_gaus = curve_fit(self.gaussian, Wavelength[Peak:], Sum_Y[Peak:], p0=[1, self.Spectrometer.Probe_center, 0.1])
            fit_gaussian = self.gaussian(Wavelength, *popt_gaus)
            FWHM = 2 * np.sqrt(2 * np.log(2)) * popt_gaus[-1]
            Input_FWHM = popt_gaus[-1]
            Fit = fit_gaussian

        return Probe_pix_loc, Central_wavelength, popt_gaus, [Wavelength, Fit], [Sum_X, Sum_Y]

    @staticmethod
    def lorentz(x, amp, gamma):
        """
        Computes a Lorentzian function for the given input array.

        Parameters
        ----------
        x : array-like
            The input values at which to evaluate the Lorentzian function.
        amp : float
            The amplitude (height) of the Lorentzian peak.
        gamma : float
            The full width at half maximum (FWHM) of the peak.

        Returns
        -------
        array : ndarray
            The computed Lorentzian values for each element in `x`.
        """
        g = gamma / 2
        array = (amp * g) / (cst.pi * (x**2 + g**2))
        return array

    @staticmethod
    def gaussian(x, amp, mu, std):
        """
        Computes a Gaussian function for the given input array.

        Parameters
        ----------
        x : array-like
            The input values at which to evaluate the Gaussian function.
        amp : float
            The amplitude (height) of the Gaussian peak.
        mu : float
            The mean (center) of the Gaussian distribution.
        std : float
            The standard deviation (width) of the Gaussian distribution.

        Returns
        -------
        array : ndarray
            The computed Gaussian values for each element in `x`.
        """
        array = amp * np.exp(-((x - mu) ** 2) / (2 * std ** 2))
        return array

if __name__ == "__main__":
    #%%
    ## Import data
    ###############################################################
    ##                                                           ##
    ##                        DATA TO INPUT                      ##
    ##                                                           ##
    ###############################################################

    ## Define the shot day, shot number, and diagnostic
    Shot_day = 'OMEGA_Jun2023'
    Shot_number = 0
    Diagnostic = 'IAW'

    ## If using TDYNO_NLUF Box account, User as required in Parent_loc
    User = 'hpoole'

    ## Example shot number, used for finding the spectrometer central wavelength
    ## This feature can be switched off by setting Experimental_shot = 0
    ## NB: It is not critical for this script to have the correct spectrometer center wavelength,
    ## as this will evaluated during the data extraction.
    Experimental_shot = 108617

    ## If you want to save output figures and info
    Save_bool = True

    ###############################################################

    ###############################################################
    ##                                                           ##
    ##                      FILE LOCATIONS                       ##
    ##                                                           ##
    ###############################################################
    Global_loc = os.path.join('/', 'Users', User, 'Library', 'CloudStorage', 'Box-Box', 'TDYNO_NLUF', 'OMEGA', Shot_day, 'Data')
    Parent_loc = os.path.join(Global_loc, str(Shot_number), Diagnostic)

    ## Define the calibration files
    ## FWHM_file_loc: This file provides the FWHM calibration data
    ## Alignment_file_loc: This file provides the alignment calibration data
    ## NB: Ideally, these files are the same, but often not..
    if Diagnostic == 'IAW':
        FWHM_file_loc = os.path.join(Parent_loc, 'IAW_532_1o_532cw_500um_121p71_270.hdf')
        Alignment_file_loc = FWHM_file_loc
    elif Diagnostic == 'EPW':
        FWHM_file_loc = os.path.join(Parent_loc, 'EPW_FWHM_100um_263p5cw_ross_150ph.hdf')
        Alignment_file_loc = os.path.join(Parent_loc, 'EPW_align_532_1o_527cw_500um_121p71_270.hdf')

    ## Check if the files exists
    if not os.path.exists(FWHM_file_loc):
        print(f"FWHM file not found: {FWHM_file_loc}")
        sys.exit(1)
    if not os.path.exists(Alignment_file_loc):
        print(f"Alignment file not found: {Alignment_file_loc}")
        sys.exit(1)
    ###############################################################
    
    #%%
    ## Run the calibration analysis
    ###############################################################
    ##                                                           ##
    ##                    PERFORM ANALYSIS                       ##
    ##                                                           ##
    ###############################################################
    
    Calibration = Calibration_analysis(Diagnostic, Global_loc, Parent_loc, FWHM_file_loc, Alignment_file_loc, Experimental_shot, Save_bool)

    ###############################################################
    #%%
    ## Print and save the calibration information
    print('Probe pixel location = {}'.format(Calibration.Probe_pix_loc))
    print('Central wavelength = {:.6g} nm'.format(Calibration.Central_wavelength))
    print('Instrument FWHM = {:.4g} nm'.format(Calibration.FWHM))
    ## The GG OTS code takes the Gaussian sigma as input for FWHM
    print('GG OTS Code FWHM input = {:.4g} nm'.format(Calibration.FWHM/(2 * np.sqrt(2 * np.log(2)))))
    
    if Save_bool:
        with open(os.path.join(Parent_loc, f'{Diagnostic}_calibration_info.txt'), 'w') as f:
            f.write(f'Probe pixel location = {Calibration.Probe_pix_loc}\n')
            f.write(f'Central wavelength = {Calibration.Central_wavelength:.6g} nm\n')
            f.write(f'Instrument FWHM = {Calibration.FWHM:.4g} nm\n')
        f.close()

    plt.show()